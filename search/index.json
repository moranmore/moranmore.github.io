[{"content":"前言 已经试过的搭建博客的方式：\n1.从0开始搭建一个wordpress的博客（第一个服务器上搭建过）。\n2.Hexo+github pages搭建博客（后来没维护彻底放飞了）。\n3.cpanel 的wordpress博客（没动力写，最后跟着域名一起没了，其实是买错site了，应该买vps的）。\n4.hugo+github pages第一次搭建（后来没更新）。\n5.vps上试用docker-compose最后成功搭建wordpress（现在还在用）。\n6.标题（刚搭建好）。\n优势 对于docker搭建wordpress的博客是很舒服的，不用考虑图床之类的问题。只需要担心的是wordpress插件会不会出问题之类的， 配置需要一些时间，反向代理域名和端口，还有CF配置SSL等。\nhugo相比hexo生成据说好用一些，但是本文不是争论这些。首先hugo部署很方便，而且环境配置只需要配置环境变量然后就能用了。配置问题主要是Actions的部分，还有就是CF的ip添加一次只能添加一个，比Google的麻烦一些。但是Actions确实很好用，省去了本地生成的麻烦。\n部署 首先，需要拥有一个github账号，并且在这个账号中建立两个仓库：\n1.用于存储hugo site的源码，并且在这个仓库中加入Actions的文件，用于实现github的actions生成。\n2.用于存储生成之后的网站的源码，这个仓库就是用于展示的仓库。\n完成前置条件之后，部署博客的大体思路是这样的：\n作者首先安装Go语言的环境和hugo，然后初始化site，配置本地的site文件，推送到github的源码仓库，由源码仓库中的actions执行生成name.github.io仓库中的内容，打开这个链接就可以访问了，之后配置cloudflare之类的比较简单了。\ngo和hugo环境配置 下载go语言的安装包，添加bin目录到环境变量中（win平台是安装的，所以不需要）：\n下载地址：https://go.dev/dl/\n1 2 3 4 tar -zxvf \u0026#39;下载的文件名字\u0026#39; go # 添加环境变量 export PATH=$PATH:/usr/local/go/bin authorized_keys 安装hugo并且配置hugo\n1 2 3 4 # 下载地址：https://github.com/gohugoio/hugo/releases # 解压缩到对应的目录，然后添加环境变量，当在win中运行 where hugo #如果有结果就说明hugo配置好了 在网站的父目录中创建网站：\n1 hugo new site \u0026#34;your site\u0026#39;s name\u0026#34; 添加主题，因为这个时候的hugo网站是没有主题的，所以需要添加主题，在此之前，先说明hugo在本地的生成是有两种的，一种是hugo server -D这种是生成所有的文章预览，包括草稿，如果开始的框中的draft:true这种情况下，只用hugo server是无法生成预览的，把true改为false，才能生成预览，这种情况之下，及时推送到github然后actions也没有文章可以看到。\n清除git所用的代理配置：\n1 2 3 git config --global --unset http.proxy git config --global --unset https.proxy # 手动删除 ~/.gitconfig 也可以实现重置配置的效果 将theme\\examplseSite里面的config.yoml东西复制出来，放到网站的根目录中，这时候就基本相当于配置好了一个基本的网站了（里面的内容还是examplesite的）。\n推送到github 推送到github需要有两个步骤，首先需要将账户登录到git，这里需要配置密钥对，生成的方式：\n1 2 ssh-keygen -t rsa -b 4096 -C \u0026#34;deploy_github_pages\u0026#34; -f \u0026#39;这里是你想要给密钥的命名\u0026#39; # 生成一个key文件还有一个key.pub文件（假设在-f之后的名字是key） 第一个密钥对：\n首先配置github认证需要的两个密钥，私钥放到本地，公钥上传到Settins|SSH and GPG keys|Authentication Keys 这里。\n然后就可以git来推送文件了。\n第二个密钥对：\n用于连接两个仓库，一个是私有仓库用于存放hugo site根目录中的所有文件，在这个仓库中的Settings|Secrets and variables|中部署私钥，这里的私钥就是类似key里面的内容，直接全部复制到里面就行了，这里的名字要记住，然后在actions中的文件配置需要用到。\n公钥的位置放到name.github.io仓库中的Settings|Deploy keys位置，建议起名字的时候可以和前面的私钥对应，或者方便识别。\n配置好了密钥之后，可以初始化本地仓库，完成之后就可以推送到远程的私有仓库，在私有仓库中的actions页面执行生成静态网站的步骤。\n1 2 3 4 5 git init -b main # 合并仓库到私有仓库 git remote add origin git@github.com:xxx/xxxx.git # 没办法的情况下强行合并 git push -f origin master #注意，这一步可能有问题，建议根据自己的实际的branch更改master或者main 一般情况下如果顺利的部署步骤是：\n1 2 3 4 # cd 到网站的根目录 git add . git commit -m \u0026#34;你为这次推送的评论\u0026#34; git push origin main # 因为我的分支是main，所以推送到main 配置actions actions是一个可以进行自动化测试的工具，比如可以通过配置文件，将源代码生成为./public中的静态网站，并且推送到一个共有的仓库，这样私有仓库中的一些源码等内容不会在共有仓库中显示。\n对于github 的actions工具，会有一个类似shell的运行结果，如果出现了失败，会有报错，根据报错搜索就可以找到解决方案，一般来说google出来的结果可以解决，actions的运行报错类似如\n配置这个文件，需要在网站的根目录中添加目录：.github/workflows/写一个yml格式的文件。\n我的文件格式如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 name: Hugo Blog GitHub Pages Actions on: push: branches: - main # Set a branch name to trigger deployment pull_request: jobs: deploy: runs-on: ubuntu-22.04 permissions: contents: write concurrency: group: ${{ github.workflow }}-${{ github.ref }} steps: - uses: actions/checkout@v3.5.3 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;0.114.1\u0026#39; # extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 # If you\u0026#39;re changing the branch from main, # also change the `main` in `refs/heads/main` # below accordingly. if: github.ref == \u0026#39;refs/heads/main\u0026#39; with: external_repository: name/name.github.io # 更改这里适配你的仓库 deploy_key: ${{ secrets.xxxxxx }} #　这里的就是上面提到的私有仓库的私钥 publish_branch: main publish_dir: ./public 这个文件的配置我也是参考了网上的连接，是一个github仓库，在里面会有指导怎么写yml文件，我这个文件是满足部署，可以运行的。\n报错解决 Not submodule 在部署的时候，出现\u0026quot;Not submodule\u0026hellip;\u0026hellip;.\u0026quot;（这里的报错涉及到的是主题），这个需要在根目录中写一个名字是.gitmodules的文件，然后将你的主题的submodule放进去就行，一般hugo的主题有一个仓库是存放了一堆submodule的，在里面更改为如下的方式就好：\n1 2 3 4 5 # 比如我的主题是 hugo-tranquilpeak-theme # 添加如下文件到.gitmodules文件中，需要注意的是目录和双引号中的目录问题，和仓库中的有区别 [submodule \u0026#34;themes/hugo-tranquilpeak-theme\u0026#34;] path = themes/hugo-tranquilpeak-theme url = https://github.com/kakawait/hugo-tranquilpeak-theme.git 或者在添加主题的时候，就将主题以子模组的形式添加到themes文件夹中：\n1 2 # 主题：stack git submodule add https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack 如果markdown文件中出现了错误，也会导致报错，不放心的话可以在push的时候看着actions的运行状态。\n图片无法显示 设置图片的根目录，在文章首框中加入：\n1 2 3 typora-root-url: ./..\\..\\static # 偏好设置：复制到相对路径 ../../static/images/${filename} 或者将markdown文件命名为：index.md，然后将图片复制到文章的项目目录下，形成如下的结构：\n1 2 ├─2023 │ └─Hugo+GithubPages+Actions博客搭建 这个文章中下含有了文章index.md和图片报错实例，这个图片的名字是可以命名的，这样也好在本地使用。\n设置avatar.png 在根目录中的assets文件夹中新建img文件夹，放入avatar.png。\n站点头像 实际目录：/static/images/favicon.ico\n设置：\n1 2 3 4 5 6 params: mainSections: - post featuredImageField: image rssFullContent: true favicon: /images/favicon.ico 参考 Hugo actions的指导：https://github.com/peaceiris/actions-hugo\n报错解决：https://www.youtube.com/watch?v=DMgEGpqXEM4\n主题gitmodules：https://github.com/gohugoio/hugoThemes/blob/master/.gitmodules\n标题无法从一级标题开始显示：https://huweim.github.io/post/blog_hugo_%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/\n","date":"2023-06-29T02:03:52+08:00","permalink":"https://hfwjher.love/p/hugo-githubpages-actions%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/","title":"Hugo+GithubPages+Actions博客搭建"}]
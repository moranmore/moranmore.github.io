[{"content":"搭建环境 vps使用的是Ubuntu20.04+docker\ndockerfile一般用官方给出来的就行，或者找一个能交互的题目的dockerfile（比赛结束之后去discord或者github）。我的实例中没有用到socket库，这种docker不需要。\n在这里不详细解释更细致的内容，一般情况下需要更改的部分是dockerfile中的python版本，额外的库，其他的直接按照部署docker的方式来就行，测试的时候如果中断可能是网络问题。\n实例 这是一个交互计算的题目，需要通过计算100个乘法运算，获取最终的flag。\ndockerfile 1 2 3 4 5 6 7 8 9 10 FROM python:3.10 # dockerfile of test RUN apt update \u0026amp;\u0026amp; apt upgrade -y RUN apt install socat -y RUN pip install pycryptodome # modify here,from src to dst ADD calculator.py task.py ADD secret.py secret.py # modify EXEC: CMD socat -T 2 -dd -v \u0026gt;/dev/stdout TCP-L:60000,fork,reuseaddr EXEC:\u0026#34;python -u task.py\u0026#34; task script calculator.py:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 import random from secret import flag rounds = 100 welcome = \u0026#34;\u0026#34;\u0026#34; .----------------. .----------------. .----------------. .----------------. | .--------------. || .--------------. || .--------------. || .--------------. | | | _________ | || | _________ | || | _______ | || | _________ | | | | | _ _ | | || | |_ ___ | | || | / ___ | | || | | _ _ | | | | | |_/ | | \\_| | || | | |_ \\_| | || | | (__ \\_| | || | |_/ | | \\_| | | | | | | | || | | _| _ | || | \u0026#39;.___`-. | || | | | | | | | _| |_ | || | _| |___/ | | || | |`\\____) | | || | _| |_ | | | | |_____| | || | |_________| | || | |_______.\u0026#39; | || | |_____| | | | | | || | | || | | || | | | | \u0026#39;--------------\u0026#39; || \u0026#39;--------------\u0026#39; || \u0026#39;--------------\u0026#39; || \u0026#39;--------------\u0026#39; | \u0026#39;----------------\u0026#39; \u0026#39;----------------\u0026#39; \u0026#39;----------------\u0026#39; \u0026#39;----------------\u0026#39; \u0026#34;\u0026#34;\u0026#34; def task(): print(welcome) for _ in range(rounds): a,b = random.randint(1,1000),random.randint(1,1000) c = a*b cho = input(f\u0026#34;Please input your answer of {a}*{b}:\u0026#34;) if cho == str(c): print(\u0026#34;Right!\u0026#34;) else: exit(\u0026#34;Wrong...\u0026#34;) print(f\u0026#34;Here is your flag:{flag}\u0026#34;) task() secret.py:\n1 2 3 4 from uuid import uuid1 # test = \u0026#34;flag{\u0026#34;+str(uuid1()) + \u0026#34;}\u0026#34; # print(test) flag = \u0026#34;flag{.....}\u0026#34; write up 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # solve.py from pwn import * ip=\u0026#34;\u0026#34; port= p = remote(ip,port) pad = \u0026#34;Please input your answer of \u0026#34; p.recvlines(11) # 跳过welcome while 1: res = p.recv() print(res) if b\u0026#34;flag{\u0026#34; in res: exit(res) l = res[len(pad):-1].split(b\u0026#34;*\u0026#34;) ans = str(int(l[0])*int(l[1])) p.sendline(bytes(ans.encode())) a=p.recvline() print(a) bash 1 2 3 4 docker build -t test . # vps端口：容器端口， 容器名称：镜像名称 docker run -d -p 50000:60000 --name cryptotest test # 这样容器一直在运行，只需要nc访问对应的端口就可以了 其他 ASCII艺术字 有时候题目开始的时候会有一个题目的名字显示，在终端中用ascii艺术字展示的，这里有网站可以实现这种方法(或者搜索ascii艺术字也可以)：\n艺术字网站：patorjk\n域名+端口的说明 一些比赛给的靶机带有域名，可以使用反向代理，但是我没有试过，有时间可能会试试（可能有更简单的方法，有时间研究一下）。\n","date":"2023-08-21T05:52:28+08:00","permalink":"https://expanse.rsvp/p/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAcrypto%E4%BA%A4%E4%BA%92%E5%9E%8B%E9%A2%98%E7%9B%AE/","title":"快速搭建crypto交互型题目"},{"content":"前言 之前试过在blogger和GitHub Pages搭建博客，也用过docker+WordPress搭建，但是后者因为日志过大，加上markdown写起来不是很方面，所以现在又用hugo+GitHub Pages +Actions来搭，这样markdown写起来方便，离线的时候用起来方便\n优势 对于docker搭建wordpress的博客是很舒服的，不用考虑图床之类的问题。只需要担心的是wordpress插件会不会出问题之类的， 配置需要一些时间，反向代理域名和端口，还有CF配置SSL等。\nhugo相比hexo生成个人感觉好用一些。首先hugo部署很方便，而且环境配置只需要配置环境变量然后就能用了。配置问题主要是Actions的部分，还有就是CF的ip添加一次只能添加一个，比Google的麻烦一些。但是Actions确实很好用，省去了本地生成的麻烦，只需要push到博客仓库就行了（此处的博客仓库是一个私有仓库，不是公开的仓库）。\n部署 首先，需要拥有一个github账号，并且在这个账号中建立两个仓库：\n1.用于存储hugo site的源码，并且在这个仓库中加入Actions的文件，用于实现github的actions生成。\n2.用于存储生成之后的网站的源码，这个仓库就是用于展示的仓库。\n完成前置条件之后，部署博客的大体思路是这样的：\n作者首先安装Go语言的环境和hugo，然后初始化site，配置本地的site文件，推送到github的源码仓库，由源码仓库中的Actions执行生成name.github.io仓库中的内容，打开这个链接就可以访问了，之后配置cloudflare之类的比较简单了。\ngo和hugo环境配置 下载go语言的安装包，添加bin目录到环境变量中（win平台是安装的，所以不需要）：\n下载地址：https://go.dev/dl/\n1 2 3 4 tar -zxvf \u0026#39;下载的文件名字\u0026#39; go # 添加环境变量 export PATH=$PATH:/usr/local/go/bin authorized_keys 安装hugo并且配置hugo\n1 2 3 4 # 下载地址：https://github.com/gohugoio/hugo/releases # 解压缩到对应的目录，然后添加环境变量，当在win中运行 where hugo #如果有结果就说明hugo配置好了 在网站的父目录中创建网站：\n1 hugo new site \u0026#34;your site\u0026#39;s name\u0026#34; 添加主题，因为这个时候的hugo网站是没有主题的，所以需要添加主题，在此之前，先说明hugo在本地的生成是有两种的，一种是hugo server -D这种是生成所有的文章预览，包括草稿，如果开始的框中的draft:true这种情况下，只用hugo server是无法生成预览的，把true改为false，才能生成预览，这种情况之下，及时推送到github然后actions也没有文章可以看到。\n清除git所用的代理配置：\n1 2 3 git config --global --unset http.proxy git config --global --unset https.proxy # 手动删除 ~/.gitconfig 也可以实现重置配置的效果 将theme\\examplseSite里面的config.yoml东西复制出来，放到网站的根目录中，这时候就基本相当于配置好了一个基本的网站了（里面的内容还是examplesite的）。\n推送到github 推送到github需要有两个步骤，首先需要将账户登录到git，这里需要配置密钥对，生成的方式：\n1 2 ssh-keygen -t rsa -b 4096 -C \u0026#34;deploy_github_pages\u0026#34; -f \u0026#39;这里是你想要给密钥的命名\u0026#39; # 生成一个key文件还有一个key.pub文件（假设在-f之后的名字是key） 第一个密钥对：\n首先配置github认证需要的两个密钥，私钥放到本地，公钥上传到Settins|SSH and GPG keys|Authentication Keys 这里。\n然后就可以git来推送文件了。\n第二个密钥对：\n用于连接两个仓库，一个是私有仓库用于存放hugo site根目录中的所有文件，在这个仓库中的Settings|Secrets and variables|中部署私钥，这里的私钥就是类似key里面的内容，直接全部复制到里面就行了，这里的名字要记住，然后在actions中的文件配置需要用到。\n公钥的位置放到name.github.io仓库中的Settings|Deploy keys位置，建议起名字的时候可以和前面的私钥对应，或者方便识别。\n配置好了密钥之后，可以初始化本地仓库，完成之后就可以推送到远程的私有仓库，在私有仓库中的actions页面执行生成静态网站的步骤。\n1 2 3 4 5 git init -b main # 合并仓库到私有仓库 git remote add origin git@github.com:xxx/xxxx.git # 没办法的情况下强行合并 git push -f origin master #注意，这一步可能有问题，建议根据自己的实际的branch更改master或者main 一般情况下如果顺利的部署步骤是：\n1 2 3 4 # cd 到网站的根目录 git add . git commit -m \u0026#34;你为这次推送的评论\u0026#34; git push origin main # 因为我的分支是main，所以推送到main 配置actions actions是一个可以进行自动化测试的工具，比如可以通过配置文件，将源代码生成为./public中的静态网站，并且推送到一个共有的仓库，这样私有仓库中的一些源码等内容不会在共有仓库中显示。\n对于github 的actions工具，会有一个类似shell的运行结果，如果出现了失败，会有报错，根据报错搜索就可以找到解决方案，一般来说google出来的结果可以解决，actions的运行报错类似如\n配置这个文件，需要在网站的根目录中添加目录：.github/workflows/写一个yml格式的文件。\n我的文件格式如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 name: Hugo Blog GitHub Pages Actions on: push: branches: - main # Set a branch name to trigger deployment pull_request: jobs: deploy: runs-on: ubuntu-22.04 permissions: contents: write concurrency: group: ${{ github.workflow }}-${{ github.ref }} steps: - uses: actions/checkout@v3.5.3 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;0.114.1\u0026#39; # extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 # If you\u0026#39;re changing the branch from main, # also change the `main` in `refs/heads/main` # below accordingly. if: github.ref == \u0026#39;refs/heads/main\u0026#39; with: external_repository: name/name.github.io # 更改这里适配你的仓库 deploy_key: ${{ secrets.xxxxxx }} #　这里的就是上面提到的私有仓库的私钥 publish_branch: main publish_dir: ./public 这个文件的配置我也是参考了网上的连接，是一个github仓库，在里面会有指导怎么写yml文件，我这个文件是满足部署，可以运行的。\n报错解决 Not submodule 在部署的时候，出现\u0026quot;Not submodule\u0026hellip;\u0026hellip;.\u0026quot;（这里的报错涉及到的是主题），这个需要在根目录中写一个名字是.gitmodules的文件，然后将你的主题的submodule放进去就行，一般hugo的主题有一个仓库是存放了一堆submodule的，在里面更改为如下的方式就好：\n1 2 3 4 5 # 比如我的主题是 hugo-tranquilpeak-theme # 添加如下文件到.gitmodules文件中，需要注意的是目录和双引号中的目录问题，和仓库中的有区别 [submodule \u0026#34;themes/hugo-tranquilpeak-theme\u0026#34;] path = themes/hugo-tranquilpeak-theme url = https://github.com/kakawait/hugo-tranquilpeak-theme.git 或者在添加主题的时候，就将主题以子模组的形式添加到themes文件夹中：\n1 2 # 主题：stack git submodule add https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack 如果markdown文件中出现了错误，也会导致报错，不放心的话可以在push的时候看着actions的运行状态。\n图片无法显示 设置图片的根目录，在文章首框中加入：\n1 2 3 typora-root-url: ./..\\..\\static # 偏好设置：复制到相对路径 ../../static/images/${filename} 或者将markdown文件命名为：index.md，然后将图片复制到文章的项目目录下，形成如下的结构：\n1 2 ├─2023 │ └─Hugo+GithubPages+Actions博客搭建 这个文章中下含有了文章index.md和图片报错实例，这个图片的名字是可以命名的，这样也好在本地使用。\n站点修改 设置avatar.png 在根目录中的assets文件夹中新建img文件夹，放入avatar.png。\n站点头像 实际目录：/static/images/favicon.ico\n设置：\n1 2 3 4 5 6 params: mainSections: - post featuredImageField: image rssFullContent: true favicon: /images/favicon.ico 设置评论 采用Disqus作为评论系统，只需要更改网站根目录中的config.yaml文件中disqusShortname的值即可，改为Disqus的账户名称（需要注册Disqus账户并且用邮箱激活）。\n更换域名、用户名、仓库名字 域名 更换域名需要更换cloudflare的DNS记录，nameserver还给CF的，强制https，A记录添加为185.199.10x.153（x为9-11），代理状态为仅DNS。\n用户名字 如果更换了仓库名字或者github用户名字、域名，需要更改配置文件（ymal中的内容，和hugo.yml external_repository:，static中的CNAME记录，这里可以用everything搜索CNAME修改）。\n一般是更改config中的内容，改为用户名+github\u0026hellip;的形式，域名需要将所有的旧域名替换成新域名，如果出现无法push的情况，可以更换密钥，添加到公开仓库的时候可以勾选上Allow write access，可以解决128报错无法推送的问题。\n报错 如果ssh更新但是没有添加邮箱（-C），可以把私钥名字改为id_rsa重新push。\n发布文章 上面用的是index.md来存放文章内容，所以写新文章的时候用：\n1 hugo new .\\content\\post\\2023\\文章标题\\index.md 这样图片直接复制到当前文件夹就行了。\n双设备 如果有两个不同系统的笔记本，比如一个Ubuntu和一个Windows，可以在两个设备上同时clone下来仓库，比如已经完成了另一个设备上的git安装，还没clone仓库到本地时候：\n参考 Hugo actions的指导：https://github.com/peaceiris/actions-hugo\n报错解决：https://www.youtube.com/watch?v=DMgEGpqXEM4\n主题gitmodules：https://github.com/gohugoio/hugoThemes/blob/master/.gitmodules\n标题无法从一级标题开始显示：https://huweim.github.io/post/blog_hugo_%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/\n","date":"2023-06-29T02:03:52+08:00","permalink":"https://expanse.rsvp/p/hugo-githubpages-actions%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/","title":"Hugo+GithubPages+Actions博客搭建"}]